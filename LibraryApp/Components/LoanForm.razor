@using Models
@using Services
@using System.ComponentModel.DataAnnotations
@inject DialogService DialogService
@inject BookService BookService
@inject LenderService LenderService

<EditForm Model="@_loan" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <RadzenStack Gap="1rem">
        <RadzenFormField Text="Book" Variant="Variant.Outlined">
            <RadzenDropDown Data="@_books"
                            TextProperty="Title"
                            ValueProperty="Id"
                            @bind-Value="_loan.BookId"
                            AllowFiltering="true"
                            Placeholder="Select a book" />
            <ValidationMessage For="@(() => _loan.BookId)" />
        </RadzenFormField>

        <RadzenFormField Text="Lender" Variant="Variant.Outlined">
            <RadzenDropDown Data="@_lenders"
                            TextProperty="FullName"
                            ValueProperty="Id"
                            @bind-Value="_loan.LenderId"
                            AllowFiltering="true"
                            Placeholder="Select a lender" />
            <ValidationMessage For="@(() => _loan.LenderId)" />
        </RadzenFormField>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Create Loan" />
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Click="@Cancel" />
        </RadzenStack>
    </RadzenStack>
</EditForm>

@code {
    class LoanCreateModel
    {
        [Required(ErrorMessage = "Book is required")]
        public int? BookId { get; set; }

        [Required(ErrorMessage = "Lender is required")]
        public int? LenderId { get; set; }
    }

    List<Book> _books = new();
    List<Lender> _lenders = new();
    LoanCreateModel _loan = new();

    protected override async Task OnInitializedAsync()
    {
        _books = await BookService.GetAllAsync();
        _lenders = await LenderService.GetAllAsync();
    }

    Task Submit()
    {
        DialogService.Close((_loan.BookId!.Value, _loan.LenderId!.Value));
        return Task.CompletedTask;
    }

    void Cancel()
    {
        DialogService.Close(null);
    }
}