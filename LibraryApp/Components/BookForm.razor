@using Models
@inject DialogService DialogService

<EditForm Model="@Book" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <RadzenStack Gap="1rem">
        <RadzenFormField Text="ISBN" Variant="Variant.Outlined">
            <RadzenTextBox @bind-Value="Book.ISBN" MaxLength="13" Placeholder="Enter ISBN (max 13 chars)" />
            <ValidationMessage For="@(() => Book.ISBN)" />
        </RadzenFormField>

        <RadzenFormField Text="Title" Variant="Variant.Outlined">
            <RadzenTextBox @bind-Value="Book.Title" />
            <ValidationMessage For="@(() => Book.Title)" />
        </RadzenFormField>

        <RadzenFormField Text="Author" Variant="Variant.Outlined">
            <RadzenTextBox @bind-Value="Book.Author" />
            <ValidationMessage For="@(() => Book.Author)" />
        </RadzenFormField>

        <RadzenFormField Text="Published Year" Variant="Variant.Outlined">
            <RadzenNumeric @bind-Value="Book.PublishedYear" />
            <ValidationMessage For="@(() => Book.PublishedYear)" />
        </RadzenFormField>

        <RadzenFormField Text="Total Copies" Variant="Variant.Outlined">
            <RadzenNumeric @bind-Value="Book.TotalCopies" />
            <ValidationMessage For="@(() => Book.TotalCopies)" />
        </RadzenFormField>

        <RadzenFormField Text="Copies Available" Variant="Variant.Outlined">
            <RadzenNumeric @bind-Value="Book.CopiesAvailable" />
            <ValidationMessage For="@(() => Book.CopiesAvailable)" />
        </RadzenFormField>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Cancel" Click="@Cancel" />
        </RadzenStack>
    </RadzenStack>
</EditForm>

@code {
    [Parameter]
    public Book Book { get; set; } = new();

    protected override void OnInitialized()
    {
        // Ensure initial values satisfy validation rules so OnValidSubmit can fire for new books.
        if (Book.PublishedYear < 1900 || Book.PublishedYear > 2100)
        {
            Book.PublishedYear = DateTime.Now.Year;
        }

        if (Book.TotalCopies < 1)
        {
            Book.TotalCopies = 1;
        }

        if (Book.CopiesAvailable < 0 || Book.CopiesAvailable > Book.TotalCopies)
        {
            Book.CopiesAvailable = Book.TotalCopies;
        }
    }

    void Submit()
    {
        DialogService.Close(Book);
    }

    void Cancel()
    {
        DialogService.Close(null);
    }
}